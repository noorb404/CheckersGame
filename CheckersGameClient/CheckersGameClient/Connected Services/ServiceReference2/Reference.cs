//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CheckersGameClient.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.ICheckersService", CallbackContract=typeof(CheckersGameClient.ServiceReference2.ICheckersServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ICheckersService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/AddCustomer", ReplyAction="http://tempuri.org/ICheckersService/AddCustomerResponse")]
        bool AddCustomer(string username, string pssword, string FirstName, string LastName, string City);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/AddCustomer", ReplyAction="http://tempuri.org/ICheckersService/AddCustomerResponse")]
        System.Threading.Tasks.Task<bool> AddCustomerAsync(string username, string pssword, string FirstName, string LastName, string City);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/setClient", ReplyAction="http://tempuri.org/ICheckersService/setClientResponse")]
        void setClient(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/setClient", ReplyAction="http://tempuri.org/ICheckersService/setClientResponse")]
        System.Threading.Tasks.Task setClientAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/LogIn", ReplyAction="http://tempuri.org/ICheckersService/LogInResponse")]
        bool LogIn(string username, string pssword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/LogIn", ReplyAction="http://tempuri.org/ICheckersService/LogInResponse")]
        System.Threading.Tasks.Task<bool> LogInAsync(string username, string pssword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/getOnlineUsers", ReplyAction="http://tempuri.org/ICheckersService/getOnlineUsersResponse")]
        string[] getOnlineUsers(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/getOnlineUsers", ReplyAction="http://tempuri.org/ICheckersService/getOnlineUsersResponse")]
        System.Threading.Tasks.Task<string[]> getOnlineUsersAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/LogOut", ReplyAction="http://tempuri.org/ICheckersService/LogOutResponse")]
        void LogOut(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/LogOut", ReplyAction="http://tempuri.org/ICheckersService/LogOutResponse")]
        System.Threading.Tasks.Task LogOutAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/outOfChallenge", ReplyAction="http://tempuri.org/ICheckersService/outOfChallengeResponse")]
        void outOfChallenge(string fromClient, string toClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/outOfChallenge", ReplyAction="http://tempuri.org/ICheckersService/outOfChallengeResponse")]
        System.Threading.Tasks.Task outOfChallengeAsync(string fromClient, string toClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/ShowInfo", ReplyAction="http://tempuri.org/ICheckersService/ShowInfoResponse")]
        void ShowInfo(string from, string to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/ShowInfo", ReplyAction="http://tempuri.org/ICheckersService/ShowInfoResponse")]
        System.Threading.Tasks.Task ShowInfoAsync(string from, string to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/CheckUserName", ReplyAction="http://tempuri.org/ICheckersService/CheckUserNameResponse")]
        bool CheckUserName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/CheckUserName", ReplyAction="http://tempuri.org/ICheckersService/CheckUserNameResponse")]
        System.Threading.Tasks.Task<bool> CheckUserNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/AddStepToTheBoard", ReplyAction="http://tempuri.org/ICheckersService/AddStepToTheBoardResponse")]
        bool AddStepToTheBoard(double x, double y, string fromClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/AddStepToTheBoard", ReplyAction="http://tempuri.org/ICheckersService/AddStepToTheBoardResponse")]
        System.Threading.Tasks.Task<bool> AddStepToTheBoardAsync(double x, double y, string fromClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/SendChallenge", ReplyAction="http://tempuri.org/ICheckersService/SendChallengeResponse")]
        bool SendChallenge(string fromClient, string toClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/SendChallenge", ReplyAction="http://tempuri.org/ICheckersService/SendChallengeResponse")]
        System.Threading.Tasks.Task<bool> SendChallengeAsync(string fromClient, string toClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/UpdateWin", ReplyAction="http://tempuri.org/ICheckersService/UpdateWinResponse")]
        void UpdateWin(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/UpdateWin", ReplyAction="http://tempuri.org/ICheckersService/UpdateWinResponse")]
        System.Threading.Tasks.Task UpdateWinAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/UpdateLose", ReplyAction="http://tempuri.org/ICheckersService/UpdateLoseResponse")]
        void UpdateLose(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/UpdateLose", ReplyAction="http://tempuri.org/ICheckersService/UpdateLoseResponse")]
        System.Threading.Tasks.Task UpdateLoseAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/Search", ReplyAction="http://tempuri.org/ICheckersService/SearchResponse")]
        void Search(string op, string usr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/Search", ReplyAction="http://tempuri.org/ICheckersService/SearchResponse")]
        System.Threading.Tasks.Task SearchAsync(string op, string usr);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICheckersServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICheckersService/UpdateClientsList")]
        void UpdateClientsList(string[] users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/SendChallengeToClient", ReplyAction="http://tempuri.org/ICheckersService/SendChallengeToClientResponse")]
        bool SendChallengeToClient(string fromClient);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICheckersService/NewStep")]
        void NewStep(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICheckersService/UpdateProfileInfo")]
        void UpdateProfileInfo(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICheckersService/SearchC")]
        void SearchC(string[] op);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICheckersServiceChannel : CheckersGameClient.ServiceReference2.ICheckersService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckersServiceClient : System.ServiceModel.DuplexClientBase<CheckersGameClient.ServiceReference2.ICheckersService>, CheckersGameClient.ServiceReference2.ICheckersService {
        
        public CheckersServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CheckersServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CheckersServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CheckersServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CheckersServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool AddCustomer(string username, string pssword, string FirstName, string LastName, string City) {
            return base.Channel.AddCustomer(username, pssword, FirstName, LastName, City);
        }
        
        public System.Threading.Tasks.Task<bool> AddCustomerAsync(string username, string pssword, string FirstName, string LastName, string City) {
            return base.Channel.AddCustomerAsync(username, pssword, FirstName, LastName, City);
        }
        
        public void setClient(string username) {
            base.Channel.setClient(username);
        }
        
        public System.Threading.Tasks.Task setClientAsync(string username) {
            return base.Channel.setClientAsync(username);
        }
        
        public bool LogIn(string username, string pssword) {
            return base.Channel.LogIn(username, pssword);
        }
        
        public System.Threading.Tasks.Task<bool> LogInAsync(string username, string pssword) {
            return base.Channel.LogInAsync(username, pssword);
        }
        
        public string[] getOnlineUsers(string username) {
            return base.Channel.getOnlineUsers(username);
        }
        
        public System.Threading.Tasks.Task<string[]> getOnlineUsersAsync(string username) {
            return base.Channel.getOnlineUsersAsync(username);
        }
        
        public void LogOut(string userName) {
            base.Channel.LogOut(userName);
        }
        
        public System.Threading.Tasks.Task LogOutAsync(string userName) {
            return base.Channel.LogOutAsync(userName);
        }
        
        public void outOfChallenge(string fromClient, string toClient) {
            base.Channel.outOfChallenge(fromClient, toClient);
        }
        
        public System.Threading.Tasks.Task outOfChallengeAsync(string fromClient, string toClient) {
            return base.Channel.outOfChallengeAsync(fromClient, toClient);
        }
        
        public void ShowInfo(string from, string to) {
            base.Channel.ShowInfo(from, to);
        }
        
        public System.Threading.Tasks.Task ShowInfoAsync(string from, string to) {
            return base.Channel.ShowInfoAsync(from, to);
        }
        
        public bool CheckUserName(string userName) {
            return base.Channel.CheckUserName(userName);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUserNameAsync(string userName) {
            return base.Channel.CheckUserNameAsync(userName);
        }
        
        public bool AddStepToTheBoard(double x, double y, string fromClient) {
            return base.Channel.AddStepToTheBoard(x, y, fromClient);
        }
        
        public System.Threading.Tasks.Task<bool> AddStepToTheBoardAsync(double x, double y, string fromClient) {
            return base.Channel.AddStepToTheBoardAsync(x, y, fromClient);
        }
        
        public bool SendChallenge(string fromClient, string toClient) {
            return base.Channel.SendChallenge(fromClient, toClient);
        }
        
        public System.Threading.Tasks.Task<bool> SendChallengeAsync(string fromClient, string toClient) {
            return base.Channel.SendChallengeAsync(fromClient, toClient);
        }
        
        public void UpdateWin(string userName) {
            base.Channel.UpdateWin(userName);
        }
        
        public System.Threading.Tasks.Task UpdateWinAsync(string userName) {
            return base.Channel.UpdateWinAsync(userName);
        }
        
        public void UpdateLose(string userName) {
            base.Channel.UpdateLose(userName);
        }
        
        public System.Threading.Tasks.Task UpdateLoseAsync(string userName) {
            return base.Channel.UpdateLoseAsync(userName);
        }
        
        public void Search(string op, string usr) {
            base.Channel.Search(op, usr);
        }
        
        public System.Threading.Tasks.Task SearchAsync(string op, string usr) {
            return base.Channel.SearchAsync(op, usr);
        }
    }
}
